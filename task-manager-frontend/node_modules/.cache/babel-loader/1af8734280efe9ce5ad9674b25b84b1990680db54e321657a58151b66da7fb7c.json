{"ast":null,"code":"import { z } from 'zod';\nexport let TaskStatus = /*#__PURE__*/function (TaskStatus) {\n  TaskStatus[\"PENDING\"] = \"pending\";\n  TaskStatus[\"DONE\"] = \"done\";\n  return TaskStatus;\n}({});\nexport const TaskSchema = z.object({\n  id: z.number(),\n  title: z.string().min(1, 'Le titre est requis').max(100, 'Le titre ne peut pas dépasser 100 caractères'),\n  description: z.string().max(500, 'La description ne peut pas dépasser 500 caractères').optional().default(''),\n  status: z.nativeEnum(TaskStatus).default(TaskStatus.PENDING)\n});\nexport const CreateTaskSchema = z.object({\n  title: z.string().min(1, 'Le titre est requis').max(100, 'Le titre ne peut pas dépasser 100 caractères'),\n  description: z.string().max(500, 'La description ne peut pas dépasser 500 caractères')\n});\nexport const UpdateTaskSchema = TaskSchema.partial().required({\n  id: true\n});","map":{"version":3,"names":["z","TaskStatus","TaskSchema","object","id","number","title","string","min","max","description","optional","default","status","nativeEnum","PENDING","CreateTaskSchema","UpdateTaskSchema","partial","required"],"sources":["/home/amer/Desktop/application-gestion-taches/task-manager-frontend/src/types/task.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport enum TaskStatus {\n  PENDING = 'pending',\n  DONE = 'done',\n}\n\nexport const TaskSchema = z.object({\n  id: z.number(),\n  title: z.string().min(1, 'Le titre est requis').max(100, 'Le titre ne peut pas dépasser 100 caractères'),\n  description: z.string().max(500, 'La description ne peut pas dépasser 500 caractères').optional().default(''),\n  status: z.nativeEnum(TaskStatus).default(TaskStatus.PENDING),\n});\n\nexport const CreateTaskSchema = z.object({\n  title: z.string().min(1, 'Le titre est requis').max(100, 'Le titre ne peut pas dépasser 100 caractères'),\n  description: z.string().max(500, 'La description ne peut pas dépasser 500 caractères'),\n});\n\nexport const UpdateTaskSchema = TaskSchema.partial().required({ id: true });\n\nexport type Task = z.infer<typeof TaskSchema>;\nexport type CreateTaskInput = z.infer<typeof CreateTaskSchema>;\nexport type UpdateTaskInput = z.infer<typeof UpdateTaskSchema>;"],"mappings":"AAAA,SAASA,CAAC,QAAQ,KAAK;AAEvB,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAKtB,OAAO,MAAMC,UAAU,GAAGF,CAAC,CAACG,MAAM,CAAC;EACjCC,EAAE,EAAEJ,CAAC,CAACK,MAAM,CAAC,CAAC;EACdC,KAAK,EAAEN,CAAC,CAACO,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAACC,GAAG,CAAC,GAAG,EAAE,8CAA8C,CAAC;EACxGC,WAAW,EAAEV,CAAC,CAACO,MAAM,CAAC,CAAC,CAACE,GAAG,CAAC,GAAG,EAAE,oDAAoD,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,EAAE,CAAC;EAC7GC,MAAM,EAAEb,CAAC,CAACc,UAAU,CAACb,UAAU,CAAC,CAACW,OAAO,CAACX,UAAU,CAACc,OAAO;AAC7D,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAGhB,CAAC,CAACG,MAAM,CAAC;EACvCG,KAAK,EAAEN,CAAC,CAACO,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAACC,GAAG,CAAC,GAAG,EAAE,8CAA8C,CAAC;EACxGC,WAAW,EAAEV,CAAC,CAACO,MAAM,CAAC,CAAC,CAACE,GAAG,CAAC,GAAG,EAAE,oDAAoD;AACvF,CAAC,CAAC;AAEF,OAAO,MAAMQ,gBAAgB,GAAGf,UAAU,CAACgB,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC;EAAEf,EAAE,EAAE;AAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}